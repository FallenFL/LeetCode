
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        
        int n = nums1.length;
        int m = nums2.length;
        int totalLen;
        
        if ( n==0 ) 
        {
           if ((m % 2) == 1)
           {
               return nums2[m/2];  
           }
            else return ((nums2[m/2-1]+nums2[m/2])/2.0);
        }
           if ( m==0 ) 
        {
           if ((n % 2) == 1)
           {
               return nums1[n/2];
           }
            else return (nums1[n/2-1]+nums1[n/2])/2.0;
        }
        
             if (n > m) { // to ensure n<=m
            int[] temp = nums1; nums1 = nums2; nums2 = temp;
            int tmp = m; m = n; n = tmp;
        }
        if ((n+m) % 2 == 0)
        {
            totalLen = m+n;
        }
        else
        {
            totalLen = m+n+1;
        }
        int left = 0;
        int right = n;
        int i = (left + right) / 2;
        int j = totalLen / 2 - i;
        nums1 = Arrays.copyOf(nums1, nums1.length + 1);
        nums2 = Arrays.copyOf(nums2, nums2.length + 1);
        nums1[n] = 1000000;
        nums2[m] = 1000000;
        int leftMax = 0;
        int rightMin = 0;
        while (left < right)
        {
            if (i <= 0) leftMax = nums2[j-1];
            else if (j <= 0) leftMax = nums1[i-1];
            else leftMax = Math.max(nums1[i-1], nums2[j-1]);
            if (leftMax <= Math.min(nums1[i], nums2[j]))
            {
                if ((n+m) % 2 == 0)
                {
   
                    return ((leftMax + Math.min(nums1[i], nums2[j]))/2.0);
    
                }
                else 
                {
    
                    return (leftMax);

                }
            }
            
            if (i == 0)
            {
                i = 1;
                j = totalLen / 2 - i;
                left = 1;
                right = 1;
            }
            else if (nums1[i-1] > nums2[j]) //means i is larger than the answer
            {
               right = i;
               i = (left + right) / 2; 
                j = totalLen / 2 - i;
            }
            else
            {
               left = i + 1;
               i = (left + right) / 2; 
                j = totalLen / 2 - i;
            }                        
        }
                                       

                i = left;
                j = totalLen / 2 - i;
                if (i == 0) leftMax = nums2[j-1];
                else if (j == 0) leftMax = nums1[i-1];
                else leftMax = Math.max(nums1[i-1], nums2[j-1]);
                if ((n+m) % 2 == 0)
                {
                    return ((leftMax+ Math.min(nums1[i], nums2[j]))/2.0);
                
                }
                else 
                {
    
                    return (leftMax);
                    
                }
            
   
    }
}
