class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s.length() == 0) return 0;
        int[][] f = new int[s.length()][s.length()];
        int ans = 1;
        for (int i = s.length() - 1; i >= 0; i--)
            for (int j = i; j < s.length(); j++)
        {
            if (i == j) f[i][j] = 1;
            else if (s.charAt(i) == s.charAt(j))
            {
                f[i][j] = Math.max(f[i+1][j-1]+2,f[i][j]);
                ans = Math.max(ans,f[i][j]);
            }
            else 
            {
                int temp = Math.max(f[i][j-1], f[i+1][j]);
                f[i][j] = Math.max(f[i][j],temp);
                ans = Math.max(ans,f[i][j]);
            }
        }
        
        return ans;
    }
}


//原本循环是j在外层，i在内层，问题在于第二个状态转移方程f[i][j] = max(f[i][j-1],f[i+1][j])时，f[i+1][j]状态并没有被更新
