class Solution {
    public int numIslands(char[][] grid) {
        int n = grid.length;
                if (n == 0) return 0;
        int m = grid[0].length;
        int ans = 0;
        for (int i = 0; i < n; ++ i)
            for (int j = 0; j < m; ++ j)
            {
                if ((grid[i][j] == '1'))
                {
                    search(i,j,grid);
                    grid[i][j] = '0';
                    ans ++;
                }
            }
        return ans;
    }
    
    public void search(int x, int y, char[][] grid)
    {
        int n = grid.length;
        int m = grid[0].length;
        int[] dx = {1,-1,0,0};
        int[] dy = {0,0,1,-1};
        for (int i = 0; i < 4; ++ i)
            {
                int xnum = dx[i];
                int ynum = dy[i];
                if (x + xnum > -1 && x + xnum < n && y + ynum > -1 && y + ynum < m)
                {
                    if (grid[x+xnum][y+ynum] == '1')
                    {
                        grid[x+xnum][y+ynum] = '0';
                        search(x+xnum,y+ynum,grid);
                    }
                }
            }
        return;
    }
}
