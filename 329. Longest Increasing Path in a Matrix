class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix.length == 0) return 0;
        int ans = 0;
        int[][] maxL = new int[matrix.length][matrix[0].length];
        int[] dx = {1,-1,0,0};
        int[] dy = {0,0,1,-1};
        
      
        for (int i = 0; i < matrix.length; i++)
            for (int j = 0; j < matrix[0].length; j++)
            {
              maxL[i][j] = dfs(matrix, maxL, dx, dy, i , j);
              ans = Math.max(ans,maxL[i][j]);
             }
        return ans;
    } 
    
      public int dfs(int[][] matrix, int[][] maxL, int[] dx, int[] dy, int x, int y)
      {
        for (int k = 0; k < 4; k++)
              {
                if (x+dx[k] >= 0 && x+dx[k] < matrix.length & y+dy[k] >= 0 && y+dy[k] < matrix[0].length)
                {
                  if (matrix[x][y] < matrix[x+dx[k]][y+dy[k]])
                  {
                    if (maxL[x+dx[k]][y+dy[k]] != 0)
                    {
                      maxL[x][y] = Math.max(maxL[x][y], 1 + maxL[x+dx[k]][y+dy[k]]); 
                    }            
                    else
                    {
                      maxL[x][y] = Math.max(maxL[x][y], 1 + dfs(matrix, maxL, dx, dy, x+dx[k], y+dy[k])); 
                    }
                  }
                }
              }
        return Math.max(maxL[x][y],1);
      }
      
}
