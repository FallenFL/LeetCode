class Solution {
    public int longestSubstring(String s, int k) {
        return helper(s, k , 0 , s.length() - 1);   
    }
    
    public int helper(String s, int k , int start , int end)
    {
        if (end < start) return 0;
        if (end - start + 1< k) return 0;
        int[] count = new int[26];
        for (int i = start; i <= end; i++)
        {
            char c = s.charAt(i);
            count[c - 'a'] ++;
        }
        for (int i = 0; i < 26; i ++)
        {
            if (count[i] < k && count[i] != 0)
            {  
                for (int j = start; j <= end; j ++)
                {
                    if (i == s.charAt(j) - 'a')
                    {
                        int left = helper(s, k , start, j - 1);
                        int right = helper(s, k, j + 1, end);
                        return Math.max(left,right);
                    }
                }
            }
        }
        return end - start + 1;
    }
}
