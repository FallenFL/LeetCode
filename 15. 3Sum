class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
      
      List<List<Integer>> ans = new ArrayList<>();
      int[][] nums2 = new int[nums.length][nums.length];
      int[]  num3 = new int[nums.length];
      int len = 0;
      Arrays.sort(nums);
      Map <Integer, Integer> map = new HashMap();
      for (int i = 0; i < nums.length; i++)
      {
        map.put(nums[i],i);
      }
        
      for (int i = 0; i < nums.length; i++)
      {
        if (nums[i] > 0) break;
        if (i != 0)
            if (nums[i] == nums[i-1]) continue;
        for (int j = i + 1; j < nums.length; j++)
        {
           nums2[i][j] = nums[i] + nums[j];
           int complement = 0 - nums2[i][j];
           if (map.containsKey(complement)  && complement >= nums[j] && map.get(complement) != j)
           {
              List<Integer> list = new ArrayList<>();
              list.add(nums[i]);
              list.add(nums[j]);
              list.add(complement);
              if (ans.size() == 0) ans.add(list);
                  else
                  {
                    List<Integer> list1 = ans.get(ans.size()-1);
                    if ((list1.get(0) != nums[i] || list1.get(1) != nums[j]))
                    ans.add(list);
                  }
           }
        }
      }
      return ans;
    }
  
    
}

