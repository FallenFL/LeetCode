class Solution {
    public int longestValidParentheses(String s) {
        if (s.length() <= 1) return 0;
        int[] f = new int[s.length()];
        int[] num = new int[s.length()];
        int ans = 0;
        for (int i = 0; i < s.length(); i ++)
        {
            if (s.charAt(i) == '(')
            {
                num[i] = 1;
            }
            else
            {
                num[i] = -1;
            }
        }
        f[0] = 0;
        if (num[0] == 1 && num[1] == -1) f[1] = 2;
        else f[1] = 0;
        ans = Math.max(ans,f[1]);
        for (int i = 2; i < s.length(); i++)
        {
            if (num[i] == -1)
            {
                if (num[i - 1] == 1) 
                {
                   f[i] = f[i-2] + 2;
                   ans = Math.max(ans,f[i]);
                }
                else
                {
                    if ((i - f[i-1] - 1) >= 0 && num[i - f[i-1] - 1] == 1)
                    {
                        if (i - f[i-1] - 2 >= 0)
                        f[i] = f[i - 1] + f[i - f[i-1] - 2] + 2;
                        else f[i] = f[i - 1] + 2;
                        ans = Math.max(ans,f[i]);
                    }
                }
              }
       }
        return ans;
    }
}
