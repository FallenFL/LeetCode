class Solution {
    public boolean isMatch(String s, String p) {
 
        int lenS = s.length();
        int lenP = p.length();
        boolean f[][] = new boolean [lenS+10][lenP+10];// f[i][j] means the first i chars of s and first j chars of p can match or not, the indexes for s and p are i-1 and j-1
        if (lenS == 0 && lenP == 0) return true;
        if (lenP == 0) return false; 
        if (lenS == 0)
        {
            int countStar = 0;
            for (int i = 0; i <lenP; i++)
            {
                if (p.charAt(i) == '*') countStar++;
            }
            if (countStar == lenP-countStar) return true;
            else return false;
        }
        // init. Let's use f[0][0] for the situation that both strings are empty.
        
        f[0][0] = true;
        for (int j = 1; j < lenP; j++)
        {
            if (p.charAt(j) == '*') f[0][j+1] = f[0][j-1];
        }
        if (s.charAt(0) == p.charAt(0)) f[1][1] = true;
        else if (p.charAt(0) == '.') f[1][1] = true;
  

        for (int i = 1; i <= lenS; i++)
            for (int j = 1; j <= lenP; j++)
            {
                if (f[i][j]) continue; //avoid out of bound
                if (s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1) == '.')
                    f[i][j] = f[i-1][j-1];
                    else if (p.charAt(j-1) == '*')
                    {
                        if (p.charAt(j-2) != s.charAt(i-1) && p.charAt(j-2) != '.')
                            f[i][j] = f[i][j-2];
                        else 
                        {
                            if (f[i-1][j]) f[i][j] = f[i-1][j];
                            if (f[i][j-2]) f[i][j] = f[i][j-2];
                            if (f[i][j-1]) f[i][j] = f[i][j-1];
                        }
                    }
            }
        return (f[lenS][lenP]);
    }
}
